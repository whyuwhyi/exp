// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MULFP32(	// src/main/scala/EXPFP32.scala:165:7
  input         clock,	// src/main/scala/EXPFP32.scala:165:7
                reset,	// src/main/scala/EXPFP32.scala:165:7
  output        io_in_ready,	// src/main/scala/EXPFP32.scala:166:14
  input         io_in_valid,	// src/main/scala/EXPFP32.scala:166:14
  input  [31:0] io_in_bits_in1,	// src/main/scala/EXPFP32.scala:166:14
                io_in_bits_in2,	// src/main/scala/EXPFP32.scala:166:14
  input         io_out_ready,	// src/main/scala/EXPFP32.scala:166:14
  output        io_out_valid,	// src/main/scala/EXPFP32.scala:166:14
  output [31:0] io_out_bits_out	// src/main/scala/EXPFP32.scala:166:14
);

  reg         s1_valid;	// src/main/scala/EXPFP32.scala:171:25
  reg         s2_valid;	// src/main/scala/EXPFP32.scala:172:25
  reg         s3_valid;	// src/main/scala/EXPFP32.scala:173:25
  wire        s2_ready = ~s2_valid | io_out_ready;	// src/main/scala/EXPFP32.scala:172:25, :175:{18,28}
  wire        s1_ready = ~s1_valid | s2_ready;	// src/main/scala/EXPFP32.scala:171:25, :175:28, :176:{18,28}
  reg         s1_sign;	// src/main/scala/EXPFP32.scala:188:21
  reg  [9:0]  s1_eSumS;	// src/main/scala/EXPFP32.scala:189:21
  reg  [23:0] s1_prod_ll;	// src/main/scala/EXPFP32.scala:193:23
  reg  [23:0] s1_prod_lh;	// src/main/scala/EXPFP32.scala:194:23
  reg  [23:0] s1_prod_hl;	// src/main/scala/EXPFP32.scala:195:23
  reg  [23:0] s1_prod_hh;	// src/main/scala/EXPFP32.scala:196:23
  reg         s2_sign;	// src/main/scala/EXPFP32.scala:225:21
  reg  [9:0]  s2_eSumS;	// src/main/scala/EXPFP32.scala:226:21
  reg  [47:0] s2_prod;	// src/main/scala/EXPFP32.scala:227:21
  reg  [31:0] outReg;	// src/main/scala/EXPFP32.scala:239:19
  wire [8:0]  _s1_eSumS_T_5 =
    {1'h0, io_in_bits_in1[30:23]} + {1'h0, io_in_bits_in2[30:23]} - 9'h7F;	// src/main/scala/EXPFP32.scala:201:31, :202:31, :210:{26,36}, :252:32
  wire [23:0] _GEN = {12'h0, io_in_bits_in1[11:0]};	// src/main/scala/EXPFP32.scala:214:18, :219:22
  wire [23:0] _GEN_0 = {12'h0, io_in_bits_in2[11:0]};	// src/main/scala/EXPFP32.scala:216:18, :219:22
  wire [23:0] _GEN_1 = {12'h0, |(io_in_bits_in2[30:23]), io_in_bits_in2[22:12]};	// src/main/scala/EXPFP32.scala:202:31, :205:19, :217:18, :219:22, :220:22
  wire [23:0] _GEN_2 = {12'h0, |(io_in_bits_in1[30:23]), io_in_bits_in1[22:12]};	// src/main/scala/EXPFP32.scala:201:31, :204:19, :215:18, :219:22, :221:22
  wire [46:0] norm = s2_prod[47] ? s2_prod[46:0] : {s2_prod[45:0], 1'h0};	// src/main/scala/EXPFP32.scala:227:21, :243:25, :244:{21,45}, :252:32
  wire [24:0] _fracR25_T_1 =
    {1'h0, norm[46:23]} + {24'h0, norm[22] & ((|(norm[21:0])) | norm[23])};	// src/main/scala/EXPFP32.scala:234:33, :244:21, :245:22, :246:22, :247:{22,29}, :248:{21,28,37}, :249:40, :252:32
  wire [9:0]  _eAdj_T_5 = s2_eSumS + {9'h0, s2_prod[47]} + {9'h0, _fracR25_T_1[24]};	// src/main/scala/EXPFP32.scala:226:21, :227:21, :243:25, :249:40, :250:25, :252:{27,49}
  always @(posedge clock) begin	// src/main/scala/EXPFP32.scala:165:7
    if (reset) begin	// src/main/scala/EXPFP32.scala:165:7
      s1_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:171:25, :252:32
      s2_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:172:25, :252:32
      s3_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:173:25, :252:32
    end
    else begin	// src/main/scala/EXPFP32.scala:165:7
      if (s1_ready)	// src/main/scala/EXPFP32.scala:176:28
        s1_valid <= io_in_valid;	// src/main/scala/EXPFP32.scala:171:25
      if (s2_ready)	// src/main/scala/EXPFP32.scala:175:28
        s2_valid <= s1_valid;	// src/main/scala/EXPFP32.scala:171:25, :172:25
      if (io_out_ready)	// src/main/scala/EXPFP32.scala:166:14
        s3_valid <= s2_valid;	// src/main/scala/EXPFP32.scala:172:25, :173:25
    end
    if (s1_ready & io_in_valid) begin	// src/main/scala/EXPFP32.scala:176:28, :180:26
      s1_sign <= io_in_bits_in1[31] ^ io_in_bits_in2[31];	// src/main/scala/EXPFP32.scala:188:21, :201:15, :202:15, :209:20
      s1_eSumS <= {_s1_eSumS_T_5[8], _s1_eSumS_T_5};	// src/main/scala/EXPFP32.scala:189:21, :210:{14,36}
      s1_prod_ll <= _GEN * _GEN_0;	// src/main/scala/EXPFP32.scala:193:23, :219:22
      s1_prod_lh <= _GEN * _GEN_1;	// src/main/scala/EXPFP32.scala:194:23, :219:22, :220:22
      s1_prod_hl <= _GEN_2 * _GEN_0;	// src/main/scala/EXPFP32.scala:195:23, :219:22, :221:22
      s1_prod_hh <= _GEN_2 * _GEN_1;	// src/main/scala/EXPFP32.scala:196:23, :220:22, :221:22, :222:22
    end
    if (s2_ready & s1_valid) begin	// src/main/scala/EXPFP32.scala:171:25, :175:28, :181:26
      s2_sign <= s1_sign;	// src/main/scala/EXPFP32.scala:188:21, :225:21
      s2_eSumS <= s1_eSumS;	// src/main/scala/EXPFP32.scala:189:21, :226:21
      s2_prod <=
        {s1_prod_hh, 24'h0} + {11'h0, {1'h0, s1_prod_lh} + {1'h0, s1_prod_hl}, 12'h0}
        + {24'h0, s1_prod_ll};	// src/main/scala/EXPFP32.scala:193:23, :194:23, :195:23, :196:23, :219:22, :227:21, :233:30, :234:{33,40,58}, :252:32
    end
    if (io_out_ready & s2_valid)	// src/main/scala/EXPFP32.scala:172:25, :182:26
      outReg <=
        {s2_sign,
         $signed(_eAdj_T_5) < 10'sh0
           ? 8'h0
           : $signed(_eAdj_T_5) > 10'shFF ? 8'hFF : _eAdj_T_5[7:0],
         _fracR25_T_1[24] ? _fracR25_T_1[24:2] : _fracR25_T_1[23:1]};	// src/main/scala/EXPFP32.scala:204:19, :225:21, :239:19, :249:40, :250:25, :251:{21,36,51}, :252:49, :253:23, :254:23, :255:{21,35}, :256:18
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/EXPFP32.scala:165:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/EXPFP32.scala:165:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/EXPFP32.scala:165:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:7];	// src/main/scala/EXPFP32.scala:165:7
    initial begin	// src/main/scala/EXPFP32.scala:165:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/EXPFP32.scala:165:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/EXPFP32.scala:165:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/EXPFP32.scala:165:7
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          _RANDOM[i[2:0]] = `RANDOM;	// src/main/scala/EXPFP32.scala:165:7
        end	// src/main/scala/EXPFP32.scala:165:7
        s1_valid = _RANDOM[3'h0][0];	// src/main/scala/EXPFP32.scala:165:7, :171:25
        s2_valid = _RANDOM[3'h0][1];	// src/main/scala/EXPFP32.scala:165:7, :171:25, :172:25
        s3_valid = _RANDOM[3'h0][2];	// src/main/scala/EXPFP32.scala:165:7, :171:25, :173:25
        s1_sign = _RANDOM[3'h0][3];	// src/main/scala/EXPFP32.scala:165:7, :171:25, :188:21
        s1_eSumS = _RANDOM[3'h0][13:4];	// src/main/scala/EXPFP32.scala:165:7, :171:25, :189:21
        s1_prod_ll = {_RANDOM[3'h1][31:30], _RANDOM[3'h2][21:0]};	// src/main/scala/EXPFP32.scala:165:7, :193:23
        s1_prod_lh = {_RANDOM[3'h2][31:22], _RANDOM[3'h3][13:0]};	// src/main/scala/EXPFP32.scala:165:7, :193:23, :194:23
        s1_prod_hl = {_RANDOM[3'h3][31:14], _RANDOM[3'h4][5:0]};	// src/main/scala/EXPFP32.scala:165:7, :194:23, :195:23
        s1_prod_hh = _RANDOM[3'h4][29:6];	// src/main/scala/EXPFP32.scala:165:7, :195:23, :196:23
        s2_sign = _RANDOM[3'h4][30];	// src/main/scala/EXPFP32.scala:165:7, :195:23, :225:21
        s2_eSumS = {_RANDOM[3'h4][31], _RANDOM[3'h5][8:0]};	// src/main/scala/EXPFP32.scala:165:7, :195:23, :226:21
        s2_prod = {_RANDOM[3'h5][31:9], _RANDOM[3'h6][24:0]};	// src/main/scala/EXPFP32.scala:165:7, :226:21, :227:21
        outReg = {_RANDOM[3'h6][31:25], _RANDOM[3'h7][24:0]};	// src/main/scala/EXPFP32.scala:165:7, :227:21, :239:19
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/EXPFP32.scala:165:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/EXPFP32.scala:165:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = s1_ready;	// src/main/scala/EXPFP32.scala:165:7, :176:28
  assign io_out_valid = s3_valid;	// src/main/scala/EXPFP32.scala:165:7, :173:25
  assign io_out_bits_out = outReg;	// src/main/scala/EXPFP32.scala:165:7, :239:19
endmodule

