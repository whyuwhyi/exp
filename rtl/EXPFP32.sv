// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MULFP32(	// src/main/scala/EXPFP32.scala:165:7
  input         clock,	// src/main/scala/EXPFP32.scala:165:7
                reset,	// src/main/scala/EXPFP32.scala:165:7
  output        io_in_ready,	// src/main/scala/EXPFP32.scala:166:14
  input         io_in_valid,	// src/main/scala/EXPFP32.scala:166:14
  input  [31:0] io_in_bits_in1,	// src/main/scala/EXPFP32.scala:166:14
                io_in_bits_in2,	// src/main/scala/EXPFP32.scala:166:14
  input         io_out_ready,	// src/main/scala/EXPFP32.scala:166:14
  output        io_out_valid,	// src/main/scala/EXPFP32.scala:166:14
  output [31:0] io_out_bits_out	// src/main/scala/EXPFP32.scala:166:14
);

  reg         s1_valid;	// src/main/scala/EXPFP32.scala:171:25
  reg         s2_valid;	// src/main/scala/EXPFP32.scala:172:25
  reg         s3_valid;	// src/main/scala/EXPFP32.scala:173:25
  wire        s2_ready = ~s2_valid | io_out_ready;	// src/main/scala/EXPFP32.scala:172:25, :175:{18,28}
  wire        s1_ready = ~s1_valid | s2_ready;	// src/main/scala/EXPFP32.scala:171:25, :175:28, :176:{18,28}
  reg         s1_sign;	// src/main/scala/EXPFP32.scala:188:21
  reg  [9:0]  s1_eSumS;	// src/main/scala/EXPFP32.scala:189:21
  reg  [23:0] s1_prod_ll;	// src/main/scala/EXPFP32.scala:193:23
  reg  [23:0] s1_prod_lh;	// src/main/scala/EXPFP32.scala:194:23
  reg  [23:0] s1_prod_hl;	// src/main/scala/EXPFP32.scala:195:23
  reg  [23:0] s1_prod_hh;	// src/main/scala/EXPFP32.scala:196:23
  reg         s2_sign;	// src/main/scala/EXPFP32.scala:225:21
  reg  [9:0]  s2_eSumS;	// src/main/scala/EXPFP32.scala:226:21
  reg  [47:0] s2_prod;	// src/main/scala/EXPFP32.scala:227:21
  reg  [31:0] outReg;	// src/main/scala/EXPFP32.scala:239:19
  wire [8:0]  _s1_eSumS_T_5 =
    {1'h0, io_in_bits_in1[30:23]} + {1'h0, io_in_bits_in2[30:23]} - 9'h7F;	// src/main/scala/EXPFP32.scala:201:31, :202:31, :210:{26,36}, :252:32
  wire [23:0] _GEN = {12'h0, io_in_bits_in1[11:0]};	// src/main/scala/EXPFP32.scala:214:18, :219:22
  wire [23:0] _GEN_0 = {12'h0, io_in_bits_in2[11:0]};	// src/main/scala/EXPFP32.scala:216:18, :219:22
  wire [23:0] _GEN_1 = {12'h0, |(io_in_bits_in2[30:23]), io_in_bits_in2[22:12]};	// src/main/scala/EXPFP32.scala:202:31, :205:19, :217:18, :219:22, :220:22
  wire [23:0] _GEN_2 = {12'h0, |(io_in_bits_in1[30:23]), io_in_bits_in1[22:12]};	// src/main/scala/EXPFP32.scala:201:31, :204:19, :215:18, :219:22, :221:22
  wire [46:0] norm = s2_prod[47] ? s2_prod[46:0] : {s2_prod[45:0], 1'h0};	// src/main/scala/EXPFP32.scala:227:21, :243:25, :244:{21,45}, :252:32
  wire [24:0] _fracR25_T_1 =
    {1'h0, norm[46:23]} + {24'h0, norm[22] & ((|(norm[21:0])) | norm[23])};	// src/main/scala/EXPFP32.scala:234:33, :244:21, :245:22, :246:22, :247:{22,29}, :248:{21,28,37}, :249:40, :252:32
  wire [9:0]  _eAdj_T_5 = s2_eSumS + {9'h0, s2_prod[47]} + {9'h0, _fracR25_T_1[24]};	// src/main/scala/EXPFP32.scala:226:21, :227:21, :243:25, :249:40, :250:25, :252:{27,49}
  always @(posedge clock) begin	// src/main/scala/EXPFP32.scala:165:7
    if (reset) begin	// src/main/scala/EXPFP32.scala:165:7
      s1_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:171:25, :252:32
      s2_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:172:25, :252:32
      s3_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:173:25, :252:32
    end
    else begin	// src/main/scala/EXPFP32.scala:165:7
      if (s1_ready)	// src/main/scala/EXPFP32.scala:176:28
        s1_valid <= io_in_valid;	// src/main/scala/EXPFP32.scala:171:25
      if (s2_ready)	// src/main/scala/EXPFP32.scala:175:28
        s2_valid <= s1_valid;	// src/main/scala/EXPFP32.scala:171:25, :172:25
      if (io_out_ready)	// src/main/scala/EXPFP32.scala:166:14
        s3_valid <= s2_valid;	// src/main/scala/EXPFP32.scala:172:25, :173:25
    end
    if (s1_ready & io_in_valid) begin	// src/main/scala/EXPFP32.scala:176:28, :180:26
      s1_sign <= io_in_bits_in1[31] ^ io_in_bits_in2[31];	// src/main/scala/EXPFP32.scala:188:21, :201:15, :202:15, :209:20
      s1_eSumS <= {_s1_eSumS_T_5[8], _s1_eSumS_T_5};	// src/main/scala/EXPFP32.scala:189:21, :210:{14,36}
      s1_prod_ll <= _GEN * _GEN_0;	// src/main/scala/EXPFP32.scala:193:23, :219:22
      s1_prod_lh <= _GEN * _GEN_1;	// src/main/scala/EXPFP32.scala:194:23, :219:22, :220:22
      s1_prod_hl <= _GEN_2 * _GEN_0;	// src/main/scala/EXPFP32.scala:195:23, :219:22, :221:22
      s1_prod_hh <= _GEN_2 * _GEN_1;	// src/main/scala/EXPFP32.scala:196:23, :220:22, :221:22, :222:22
    end
    if (s2_ready & s1_valid) begin	// src/main/scala/EXPFP32.scala:171:25, :175:28, :181:26
      s2_sign <= s1_sign;	// src/main/scala/EXPFP32.scala:188:21, :225:21
      s2_eSumS <= s1_eSumS;	// src/main/scala/EXPFP32.scala:189:21, :226:21
      s2_prod <=
        {s1_prod_hh, 24'h0} + {11'h0, {1'h0, s1_prod_lh} + {1'h0, s1_prod_hl}, 12'h0}
        + {24'h0, s1_prod_ll};	// src/main/scala/EXPFP32.scala:193:23, :194:23, :195:23, :196:23, :219:22, :227:21, :233:30, :234:{33,40,58}, :252:32
    end
    if (io_out_ready & s2_valid)	// src/main/scala/EXPFP32.scala:172:25, :182:26
      outReg <=
        {s2_sign,
         $signed(_eAdj_T_5) < 10'sh0
           ? 8'h0
           : $signed(_eAdj_T_5) > 10'shFF ? 8'hFF : _eAdj_T_5[7:0],
         _fracR25_T_1[24] ? _fracR25_T_1[24:2] : _fracR25_T_1[23:1]};	// src/main/scala/EXPFP32.scala:204:19, :225:21, :239:19, :249:40, :250:25, :251:{21,36,51}, :252:49, :253:23, :254:23, :255:{21,35}, :256:18
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/EXPFP32.scala:165:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/EXPFP32.scala:165:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/EXPFP32.scala:165:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:7];	// src/main/scala/EXPFP32.scala:165:7
    initial begin	// src/main/scala/EXPFP32.scala:165:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/EXPFP32.scala:165:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/EXPFP32.scala:165:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/EXPFP32.scala:165:7
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          _RANDOM[i[2:0]] = `RANDOM;	// src/main/scala/EXPFP32.scala:165:7
        end	// src/main/scala/EXPFP32.scala:165:7
        s1_valid = _RANDOM[3'h0][0];	// src/main/scala/EXPFP32.scala:165:7, :171:25
        s2_valid = _RANDOM[3'h0][1];	// src/main/scala/EXPFP32.scala:165:7, :171:25, :172:25
        s3_valid = _RANDOM[3'h0][2];	// src/main/scala/EXPFP32.scala:165:7, :171:25, :173:25
        s1_sign = _RANDOM[3'h0][3];	// src/main/scala/EXPFP32.scala:165:7, :171:25, :188:21
        s1_eSumS = _RANDOM[3'h0][13:4];	// src/main/scala/EXPFP32.scala:165:7, :171:25, :189:21
        s1_prod_ll = {_RANDOM[3'h1][31:30], _RANDOM[3'h2][21:0]};	// src/main/scala/EXPFP32.scala:165:7, :193:23
        s1_prod_lh = {_RANDOM[3'h2][31:22], _RANDOM[3'h3][13:0]};	// src/main/scala/EXPFP32.scala:165:7, :193:23, :194:23
        s1_prod_hl = {_RANDOM[3'h3][31:14], _RANDOM[3'h4][5:0]};	// src/main/scala/EXPFP32.scala:165:7, :194:23, :195:23
        s1_prod_hh = _RANDOM[3'h4][29:6];	// src/main/scala/EXPFP32.scala:165:7, :195:23, :196:23
        s2_sign = _RANDOM[3'h4][30];	// src/main/scala/EXPFP32.scala:165:7, :195:23, :225:21
        s2_eSumS = {_RANDOM[3'h4][31], _RANDOM[3'h5][8:0]};	// src/main/scala/EXPFP32.scala:165:7, :195:23, :226:21
        s2_prod = {_RANDOM[3'h5][31:9], _RANDOM[3'h6][24:0]};	// src/main/scala/EXPFP32.scala:165:7, :226:21, :227:21
        outReg = {_RANDOM[3'h6][31:25], _RANDOM[3'h7][24:0]};	// src/main/scala/EXPFP32.scala:165:7, :227:21, :239:19
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/EXPFP32.scala:165:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/EXPFP32.scala:165:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = s1_ready;	// src/main/scala/EXPFP32.scala:165:7, :176:28
  assign io_out_valid = s3_valid;	// src/main/scala/EXPFP32.scala:165:7, :173:25
  assign io_out_bits_out = outReg;	// src/main/scala/EXPFP32.scala:165:7, :239:19
endmodule

module DecomposeFP32(	// src/main/scala/EXPFP32.scala:268:7
  input  [31:0] io_in_y,	// src/main/scala/EXPFP32.scala:269:14
  output [8:0]  io_out_yi,	// src/main/scala/EXPFP32.scala:269:14
  output [7:0]  io_out_yfi,	// src/main/scala/EXPFP32.scala:269:14
  output [31:0] io_out_yfj	// src/main/scala/EXPFP32.scala:269:14
);

  wire [8:0]   _eS_T_1 = {1'h0, io_in_y[30:23]} - 9'h7F;	// src/main/scala/EXPFP32.scala:276:14, :280:21, :281:20
  wire         _shifted_T = $signed(_eS_T_1) < 9'sh0;	// src/main/scala/EXPFP32.scala:280:21, :281:20
  wire [8:0]   sh = _shifted_T ? 9'h0 - _eS_T_1 : _eS_T_1;	// src/main/scala/EXPFP32.scala:280:21, :281:{16,20,28}
  wire [535:0] _shifted_T_6 = {513'h1, io_in_y[22:0]} << sh;	// src/main/scala/EXPFP32.scala:277:14, :281:16, :282:70
  wire [30:0]  shifted =
    _shifted_T ? {6'h0, {2'h1, io_in_y[22:0]} >> sh} : _shifted_T_6[30:0];	// src/main/scala/EXPFP32.scala:277:14, :281:{16,20}, :282:{20,35,47,70}
  wire [3:0]   _GEN =
    {{shifted[5:4], shifted[7]} & 3'h5, 1'h0} | {shifted[7:6], shifted[9:8]} & 4'h5;	// src/main/scala/EXPFP32.scala:281:20, :282:20, :288:26, :291:39, src/main/scala/chisel3/util/Mux.scala:50:70
  wire [3:0]   clz =
    shifted[15]
      ? 4'h0
      : shifted[14]
          ? 4'h1
          : shifted[13]
              ? 4'h2
              : shifted[12]
                  ? 4'h3
                  : shifted[11]
                      ? 4'h4
                      : shifted[10]
                          ? 4'h5
                          : shifted[9]
                              ? 4'h6
                              : _GEN[0]
                                  ? 4'h7
                                  : _GEN[1]
                                      ? 4'h8
                                      : _GEN[2]
                                          ? 4'h9
                                          : _GEN[3]
                                              ? 4'hA
                                              : shifted[4]
                                                  ? 4'hB
                                                  : shifted[3]
                                                      ? 4'hC
                                                      : shifted[2]
                                                          ? 4'hD
                                                          : {3'h7, ~(shifted[1])};	// src/main/scala/EXPFP32.scala:282:20, :291:39, src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/chisel3/util/OneHot.scala:48:45
  wire [30:0]  _mant_T_2 = {15'h0, shifted[15:0]} << clz - 4'h8;	// src/main/scala/EXPFP32.scala:282:20, :288:26, :294:{27,35}, src/main/scala/chisel3/util/Mux.scala:50:70
  assign io_out_yi = {io_in_y[31], shifted[30:23]};	// src/main/scala/EXPFP32.scala:268:7, :275:14, :282:20, :284:{19,30}
  assign io_out_yfi = {io_in_y[31], shifted[22:16]};	// src/main/scala/EXPFP32.scala:268:7, :275:14, :282:20, :286:{20,31}
  assign io_out_yfj =
    {io_in_y[31], shifted[15:0] == 16'h0 ? 8'h0 : 8'h77 - {4'h0, clz}, _mant_T_2[22:0]};	// src/main/scala/EXPFP32.scala:268:7, :275:14, :282:{20,47}, :288:26, :290:26, :292:{19,50}, :294:{27,42}, :296:19, src/main/scala/chisel3/util/Mux.scala:50:70
endmodule

module ADDFP32(	// src/main/scala/EXPFP32.scala:42:7
  input         clock,	// src/main/scala/EXPFP32.scala:42:7
                reset,	// src/main/scala/EXPFP32.scala:42:7
  output        io_in_ready,	// src/main/scala/EXPFP32.scala:43:14
  input         io_in_valid,	// src/main/scala/EXPFP32.scala:43:14
  input  [31:0] io_in_bits_in1,	// src/main/scala/EXPFP32.scala:43:14
                io_in_bits_in2,	// src/main/scala/EXPFP32.scala:43:14
  input         io_out_ready,	// src/main/scala/EXPFP32.scala:43:14
  output        io_out_valid,	// src/main/scala/EXPFP32.scala:43:14
  output [31:0] io_out_bits_out	// src/main/scala/EXPFP32.scala:43:14
);

  reg          s1_valid;	// src/main/scala/EXPFP32.scala:48:25
  reg          s2_valid;	// src/main/scala/EXPFP32.scala:49:25
  wire         s1_ready = ~s1_valid | io_out_ready;	// src/main/scala/EXPFP32.scala:48:25, :51:{18,28}
  reg          s2_sx;	// src/main/scala/EXPFP32.scala:59:24
  reg          s2_sy;	// src/main/scala/EXPFP32.scala:60:24
  reg  [7:0]   s2_ex;	// src/main/scala/EXPFP32.scala:61:24
  reg  [24:0]  s2_fx;	// src/main/scala/EXPFP32.scala:62:24
  reg  [24:0]  s2_aligned;	// src/main/scala/EXPFP32.scala:63:24
  reg          s2_guard;	// src/main/scala/EXPFP32.scala:64:24
  reg          s2_round;	// src/main/scala/EXPFP32.scala:65:24
  reg          s2_sticky;	// src/main/scala/EXPFP32.scala:66:24
  reg          s2_isSub;	// src/main/scala/EXPFP32.scala:67:24
  reg  [31:0]  outReg;	// src/main/scala/EXPFP32.scala:105:19
  wire         swap =
    io_in_bits_in1[30:23] < io_in_bits_in2[30:23]
    | io_in_bits_in1[30:23] == io_in_bits_in2[30:23]
    & io_in_bits_in1[22:0] < io_in_bits_in2[22:0];	// src/main/scala/EXPFP32.scala:72:18, :73:18, :74:36, :75:36, :76:27, :77:{15,22,29,56,65,72,81}
  wire [31:0]  x = swap ? io_in_bits_in2 : io_in_bits_in1;	// src/main/scala/EXPFP32.scala:77:{22,29,65}, :78:16
  wire [31:0]  y = swap ? io_in_bits_in1 : io_in_bits_in2;	// src/main/scala/EXPFP32.scala:77:{22,29,65}, :79:16
  wire [24:0]  fy = {2'h1, y[22:0]};	// src/main/scala/EXPFP32.scala:42:7, :79:16, :85:{17,33}
  wire [8:0]   _diff_T_2 = {1'h0, x[30:23]} - {1'h0, y[30:23]};	// src/main/scala/EXPFP32.scala:48:25, :78:16, :79:16, :82:15, :83:15, :86:25
  wire [8:0]   _stickyCount_T_4 = _diff_T_2 - 9'h2;	// src/main/scala/EXPFP32.scala:86:25, :90:72
  wire         _sticky_T = _diff_T_2 < 9'h3;	// src/main/scala/EXPFP32.scala:86:25, :91:31
  wire [24:0]  _guard_T_4 = fy >> _diff_T_2 - 9'h1;	// src/main/scala/EXPFP32.scala:85:17, :86:25, :89:{66,73}
  wire [24:0]  _round_T_4 = fy >> _stickyCount_T_4;	// src/main/scala/EXPFP32.scala:85:17, :90:{65,72}
  wire [536:0] _stickyfask_T =
    537'h1 << (_sticky_T ? 9'h0 : _stickyCount_T_4 > 9'h19 ? 9'h19 : _stickyCount_T_4);	// src/main/scala/EXPFP32.scala:90:72, :91:{26,31,44,53}, :92:32
  wire [25:0]  _sumAdd_T_2 = {1'h0, s2_fx} + {1'h0, s2_aligned};	// src/main/scala/EXPFP32.scala:48:25, :62:24, :63:24, :109:37
  wire [24:0]  _sumSub_T_5 = s2_fx + ~s2_aligned + 25'h1;	// src/main/scala/EXPFP32.scala:62:24, :63:24, :111:{52,65}
  wire [7:0]   expAdd = _sumAdd_T_2[25] ? s2_ex + 8'h1 : s2_ex;	// src/main/scala/EXPFP32.scala:61:24, :90:25, :109:37, :110:26, :119:19, :120:{14,23}, :126:14
  wire [24:0]  mantAdd = _sumAdd_T_2[25] ? _sumAdd_T_2[25:1] : _sumAdd_T_2[24:0];	// src/main/scala/EXPFP32.scala:109:37, :110:26, :119:19, :121:{15,24}, :127:{15,24}
  wire [24:0]  _mantAddR_T =
    mantAdd
    + {24'h0,
       (_sumAdd_T_2[25] ? _sumAdd_T_2[0] : s2_guard)
         & ((_sumAdd_T_2[25] ? s2_guard : s2_round) | _sumAdd_T_2[25] & s2_round
            | s2_sticky | mantAdd[0])};	// src/main/scala/EXPFP32.scala:64:24, :65:24, :66:24, :109:37, :110:26, :119:19, :121:15, :122:{10,19}, :123:10, :124:10, :127:15, :128:10, :129:10, :130:10, :133:{21,30,39}, :134:27, :140:24
  wire         zeroSub = _sumSub_T_5[23:0] == 24'h0;	// src/main/scala/EXPFP32.scala:111:65, :112:24, :139:23, :140:24
  wire [3:0]   _GEN =
    {{_sumSub_T_5[5:4], _sumSub_T_5[7]} & 3'h5, 1'h0}
    | {_sumSub_T_5[7:6], _sumSub_T_5[9:8]} & 4'h5;	// src/main/scala/EXPFP32.scala:48:25, :111:65, :112:24, :139:23, :141:37, src/main/scala/chisel3/util/Mux.scala:50:70
  wire [4:0]   sh =
    zeroSub
      ? 5'h18
      : _sumSub_T_5[23]
          ? 5'h0
          : _sumSub_T_5[22]
              ? 5'h1
              : _sumSub_T_5[21]
                  ? 5'h2
                  : _sumSub_T_5[20]
                      ? 5'h3
                      : _sumSub_T_5[19]
                          ? 5'h4
                          : _sumSub_T_5[18]
                              ? 5'h5
                              : _sumSub_T_5[17]
                                  ? 5'h6
                                  : _sumSub_T_5[16]
                                      ? 5'h7
                                      : _sumSub_T_5[15]
                                          ? 5'h8
                                          : _sumSub_T_5[14]
                                              ? 5'h9
                                              : _sumSub_T_5[13]
                                                  ? 5'hA
                                                  : _sumSub_T_5[12]
                                                      ? 5'hB
                                                      : _sumSub_T_5[11]
                                                          ? 5'hC
                                                          : _sumSub_T_5[10]
                                                              ? 5'hD
                                                              : _sumSub_T_5[9]
                                                                  ? 5'hE
                                                                  : _GEN[0]
                                                                      ? 5'hF
                                                                      : _GEN[1]
                                                                          ? 5'h10
                                                                          : _GEN[2]
                                                                              ? 5'h11
                                                                              : _GEN[3]
                                                                                  ? 5'h12
                                                                                  : _sumSub_T_5[4]
                                                                                      ? 5'h13
                                                                                      : _sumSub_T_5[3]
                                                                                          ? 5'h14
                                                                                          : _sumSub_T_5[2]
                                                                                              ? 5'h15
                                                                                              : {4'hB,
                                                                                                 ~(_sumSub_T_5[1])};	// src/main/scala/EXPFP32.scala:87:25, :111:65, :112:24, :139:23, :140:24, :141:37, :142:17, src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/chisel3/util/OneHot.scala:48:45
  wire [7:0]   _GEN_0 = {3'h0, sh};	// src/main/scala/EXPFP32.scala:42:7, :142:17, :143:20
  wire         _GEN_1 = zeroSub | _GEN_0 >= s2_ex;	// src/main/scala/EXPFP32.scala:61:24, :140:24, :143:20, :144:21
  wire [55:0]  _mantSub_T = {31'h0, _sumSub_T_5} << sh;	// src/main/scala/EXPFP32.scala:111:65, :142:17, :145:58
  wire [24:0]  mantSub = _GEN_1 ? 25'h0 : _mantSub_T[24:0];	// src/main/scala/EXPFP32.scala:88:22, :144:21, :145:{22,58,63}
  always @(posedge clock) begin	// src/main/scala/EXPFP32.scala:42:7
    if (reset) begin	// src/main/scala/EXPFP32.scala:42:7
      s1_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:48:25
      s2_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:48:25, :49:25
    end
    else begin	// src/main/scala/EXPFP32.scala:42:7
      if (s1_ready)	// src/main/scala/EXPFP32.scala:51:28
        s1_valid <= io_in_valid;	// src/main/scala/EXPFP32.scala:48:25
      if (io_out_ready)	// src/main/scala/EXPFP32.scala:43:14
        s2_valid <= s1_valid;	// src/main/scala/EXPFP32.scala:48:25, :49:25
    end
    if (s1_ready & io_in_valid) begin	// src/main/scala/EXPFP32.scala:51:28, :54:26
      s2_sx <= x[31];	// src/main/scala/EXPFP32.scala:59:24, :78:16, :80:15
      s2_sy <= y[31];	// src/main/scala/EXPFP32.scala:60:24, :79:16, :81:15
      s2_ex <= x[30:23];	// src/main/scala/EXPFP32.scala:61:24, :78:16, :82:15
      s2_fx <= {2'h1, x[22:0]};	// src/main/scala/EXPFP32.scala:42:7, :62:24, :78:16, :84:{17,33}
      s2_aligned <= _diff_T_2 > 9'h18 ? 25'h0 : fy >> _diff_T_2;	// src/main/scala/EXPFP32.scala:63:24, :85:17, :86:25, :87:25, :88:{22,45}
      s2_guard <= ~(_diff_T_2 == 9'h0 | _diff_T_2 > 9'h19) & _guard_T_4[0];	// src/main/scala/EXPFP32.scala:64:24, :86:25, :89:{20,25,43,48,66,79}, :91:{26,44}
      s2_round <= ~(_diff_T_2 < 9'h2 | _diff_T_2 > 9'h1A) & _round_T_4[0];	// src/main/scala/EXPFP32.scala:65:24, :86:25, :90:{20,25,42,47,65,78}, :91:31
      s2_sticky <= ~_sticky_T & (|({1'h1, y[22:0]} & _stickyfask_T[23:0] - 24'h1));	// src/main/scala/EXPFP32.scala:66:24, :77:29, :79:16, :85:{17,33}, :91:31, :92:{32,46}, :93:{21,43,62}
      s2_isSub <= x[31] ^ y[31];	// src/main/scala/EXPFP32.scala:67:24, :78:16, :79:16, :80:15, :81:15, :102:22
    end
    if (io_out_ready & s1_valid)	// src/main/scala/EXPFP32.scala:48:25, :55:26
      outReg <=
        {s2_isSub ? (|mantSub) & (s2_fx >= s2_aligned ? s2_sx : s2_sy) : s2_sx,
         s2_isSub
           ? (_GEN_1 ? 8'h0 : s2_ex - _GEN_0)
           : _mantAddR_T[24] ? expAdd + 8'h1 : expAdd,
         s2_isSub
           ? mantSub[22:0]
           : _mantAddR_T[24] ? _mantAddR_T[23:1] : _mantAddR_T[22:0]};	// src/main/scala/EXPFP32.scala:59:24, :60:24, :61:24, :62:24, :63:24, :67:24, :90:25, :105:19, :119:19, :120:14, :126:14, :134:27, :135:31, :136:{22,41}, :137:27, :143:20, :144:{21,37,49}, :145:22, :147:21, :148:21, :151:19, :152:{19,26,35,62,67,73}, :153:25, :154:18
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/EXPFP32.scala:42:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/EXPFP32.scala:42:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/EXPFP32.scala:42:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];	// src/main/scala/EXPFP32.scala:42:7
    initial begin	// src/main/scala/EXPFP32.scala:42:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/EXPFP32.scala:42:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/EXPFP32.scala:42:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/EXPFP32.scala:42:7
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// src/main/scala/EXPFP32.scala:42:7
        end	// src/main/scala/EXPFP32.scala:42:7
        s1_valid = _RANDOM[2'h0][0];	// src/main/scala/EXPFP32.scala:42:7, :48:25
        s2_valid = _RANDOM[2'h0][1];	// src/main/scala/EXPFP32.scala:42:7, :48:25, :49:25
        s2_sx = _RANDOM[2'h0][2];	// src/main/scala/EXPFP32.scala:42:7, :48:25, :59:24
        s2_sy = _RANDOM[2'h0][3];	// src/main/scala/EXPFP32.scala:42:7, :48:25, :60:24
        s2_ex = _RANDOM[2'h0][11:4];	// src/main/scala/EXPFP32.scala:42:7, :48:25, :61:24
        s2_fx = {_RANDOM[2'h0][31:12], _RANDOM[2'h1][4:0]};	// src/main/scala/EXPFP32.scala:42:7, :48:25, :62:24
        s2_aligned = _RANDOM[2'h1][29:5];	// src/main/scala/EXPFP32.scala:42:7, :62:24, :63:24
        s2_guard = _RANDOM[2'h1][30];	// src/main/scala/EXPFP32.scala:42:7, :62:24, :64:24
        s2_round = _RANDOM[2'h1][31];	// src/main/scala/EXPFP32.scala:42:7, :62:24, :65:24
        s2_sticky = _RANDOM[2'h2][0];	// src/main/scala/EXPFP32.scala:42:7, :66:24
        s2_isSub = _RANDOM[2'h2][1];	// src/main/scala/EXPFP32.scala:42:7, :66:24, :67:24
        outReg = {_RANDOM[2'h2][31:2], _RANDOM[2'h3][1:0]};	// src/main/scala/EXPFP32.scala:42:7, :66:24, :105:19
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/EXPFP32.scala:42:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/EXPFP32.scala:42:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = s1_ready;	// src/main/scala/EXPFP32.scala:42:7, :51:28
  assign io_out_valid = s2_valid;	// src/main/scala/EXPFP32.scala:42:7, :49:25
  assign io_out_bits_out = outReg;	// src/main/scala/EXPFP32.scala:42:7, :105:19
endmodule

module EXPFP32LUT(	// src/main/scala/EXPFP32.scala:19:7
  input  [7:0]  io_in_idx,	// src/main/scala/EXPFP32.scala:20:14
  output [31:0] io_out_value	// src/main/scala/EXPFP32.scala:20:14
);

  wire [255:0][31:0] _GEN =
    '{32'h3F00B1ED,
      32'h3F0164D2,
      32'h3F0218AF,
      32'h3F02CD87,
      32'h3F038359,
      32'h3F043A29,
      32'h3F04F1F6,
      32'h3F05AAC3,
      32'h3F066491,
      32'h3F071F62,
      32'h3F07DB35,
      32'h3F08980F,
      32'h3F0955EE,
      32'h3F0A14D5,
      32'h3F0AD4C6,
      32'h3F0B95C2,
      32'h3F0C57CA,
      32'h3F0D1ADF,
      32'h3F0DDF04,
      32'h3F0EA43A,
      32'h3F0F6A81,
      32'h3F1031DC,
      32'h3F10FA4D,
      32'h3F11C3D3,
      32'h3F128E72,
      32'h3F135A2B,
      32'h3F1426FF,
      32'h3F14F4F0,
      32'h3F15C3FF,
      32'h3F16942D,
      32'h3F17657D,
      32'h3F1837F0,
      32'h3F190B88,
      32'h3F19E046,
      32'h3F1AB62B,
      32'h3F1B8D3A,
      32'h3F1C6573,
      32'h3F1D3EDA,
      32'h3F1E196E,
      32'h3F1EF532,
      32'h3F1FD228,
      32'h3F20B051,
      32'h3F218FAF,
      32'h3F227043,
      32'h3F23520F,
      32'h3F243516,
      32'h3F251958,
      32'h3F25FED7,
      32'h3F26E595,
      32'h3F27CD94,
      32'h3F28B6D5,
      32'h3F29A15B,
      32'h3F2A8D26,
      32'h3F2B7A3A,
      32'h3F2C6897,
      32'h3F2D583F,
      32'h3F2E4934,
      32'h3F2F3B79,
      32'h3F302F0E,
      32'h3F3123F6,
      32'h3F321A32,
      32'h3F3311C4,
      32'h3F340AAF,
      32'h3F3504F3,
      32'h3F360094,
      32'h3F36FD92,
      32'h3F37FBF0,
      32'h3F38FBAF,
      32'h3F39FCD2,
      32'h3F3AFF5B,
      32'h3F3C034A,
      32'h3F3D08A4,
      32'h3F3E0F68,
      32'h3F3F179A,
      32'h3F40213B,
      32'h3F412C4D,
      32'h3F4238D2,
      32'h3F4346CD,
      32'h3F44563F,
      32'h3F45672A,
      32'h3F467991,
      32'h3F478D75,
      32'h3F48A2D8,
      32'h3F49B9BE,
      32'h3F4AD226,
      32'h3F4BEC15,
      32'h3F4D078C,
      32'h3F4E248C,
      32'h3F4F4319,
      32'h3F506334,
      32'h3F5184DF,
      32'h3F52A81E,
      32'h3F53CCF1,
      32'h3F54F35B,
      32'h3F561B5E,
      32'h3F5744FD,
      32'h3F587039,
      32'h3F599D16,
      32'h3F5ACB94,
      32'h3F5BFBB8,
      32'h3F5D2D82,
      32'h3F5E60F5,
      32'h3F5F9613,
      32'h3F60CCDF,
      32'h3F62055B,
      32'h3F633F89,
      32'h3F647B6D,
      32'h3F65B907,
      32'h3F66F85B,
      32'h3F68396A,
      32'h3F697C38,
      32'h3F6AC0C7,
      32'h3F6C0719,
      32'h3F6D4F30,
      32'h3F6E9910,
      32'h3F6FE4BA,
      32'h3F713231,
      32'h3F728177,
      32'h3F73D290,
      32'h3F75257D,
      32'h3F767A41,
      32'h3F77D0DF,
      32'h3F79295A,
      32'h3F7A83B3,
      32'h3F7BDFED,
      32'h3F7D3E0C,
      32'h3F7E9E11,
      32'h3F800000,
      32'h3FFE9E11,
      32'h3FFD3E0C,
      32'h3FFBDFED,
      32'h3FFA83B3,
      32'h3FF9295A,
      32'h3FF7D0DF,
      32'h3FF67A41,
      32'h3FF5257D,
      32'h3FF3D290,
      32'h3FF28177,
      32'h3FF13231,
      32'h3FEFE4BA,
      32'h3FEE9910,
      32'h3FED4F30,
      32'h3FEC0719,
      32'h3FEAC0C7,
      32'h3FE97C38,
      32'h3FE8396A,
      32'h3FE6F85B,
      32'h3FE5B907,
      32'h3FE47B6D,
      32'h3FE33F89,
      32'h3FE2055B,
      32'h3FE0CCDF,
      32'h3FDF9613,
      32'h3FDE60F5,
      32'h3FDD2D82,
      32'h3FDBFBB8,
      32'h3FDACB94,
      32'h3FD99D16,
      32'h3FD87039,
      32'h3FD744FD,
      32'h3FD61B5E,
      32'h3FD4F35B,
      32'h3FD3CCF1,
      32'h3FD2A81E,
      32'h3FD184DF,
      32'h3FD06334,
      32'h3FCF4319,
      32'h3FCE248C,
      32'h3FCD078C,
      32'h3FCBEC15,
      32'h3FCAD226,
      32'h3FC9B9BE,
      32'h3FC8A2D8,
      32'h3FC78D75,
      32'h3FC67991,
      32'h3FC5672A,
      32'h3FC4563F,
      32'h3FC346CD,
      32'h3FC238D2,
      32'h3FC12C4D,
      32'h3FC0213B,
      32'h3FBF179A,
      32'h3FBE0F68,
      32'h3FBD08A4,
      32'h3FBC034A,
      32'h3FBAFF5B,
      32'h3FB9FCD2,
      32'h3FB8FBAF,
      32'h3FB7FBF0,
      32'h3FB6FD92,
      32'h3FB60094,
      32'h3FB504F3,
      32'h3FB40AAF,
      32'h3FB311C4,
      32'h3FB21A32,
      32'h3FB123F6,
      32'h3FB02F0E,
      32'h3FAF3B79,
      32'h3FAE4934,
      32'h3FAD583F,
      32'h3FAC6897,
      32'h3FAB7A3A,
      32'h3FAA8D26,
      32'h3FA9A15B,
      32'h3FA8B6D5,
      32'h3FA7CD94,
      32'h3FA6E595,
      32'h3FA5FED7,
      32'h3FA51958,
      32'h3FA43516,
      32'h3FA3520F,
      32'h3FA27043,
      32'h3FA18FAF,
      32'h3FA0B051,
      32'h3F9FD228,
      32'h3F9EF532,
      32'h3F9E196E,
      32'h3F9D3EDA,
      32'h3F9C6573,
      32'h3F9B8D3A,
      32'h3F9AB62B,
      32'h3F99E046,
      32'h3F990B88,
      32'h3F9837F0,
      32'h3F97657D,
      32'h3F96942D,
      32'h3F95C3FF,
      32'h3F94F4F0,
      32'h3F9426FF,
      32'h3F935A2B,
      32'h3F928E72,
      32'h3F91C3D3,
      32'h3F90FA4D,
      32'h3F9031DC,
      32'h3F8F6A81,
      32'h3F8EA43A,
      32'h3F8DDF04,
      32'h3F8D1ADF,
      32'h3F8C57CA,
      32'h3F8B95C2,
      32'h3F8AD4C6,
      32'h3F8A14D5,
      32'h3F8955EE,
      32'h3F88980F,
      32'h3F87DB35,
      32'h3F871F62,
      32'h3F866491,
      32'h3F85AAC3,
      32'h3F84F1F6,
      32'h3F843A29,
      32'h3F838359,
      32'h3F82CD87,
      32'h3F8218AF,
      32'h3F8164D2,
      32'h3F80B1ED,
      32'h3F800000};	// src/main/scala/EXPFP32.scala:32:16
  assign io_out_value = _GEN[io_in_idx];	// src/main/scala/EXPFP32.scala:19:7, :32:16
endmodule

module Queue1_UInt32(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input         clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
                reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output        io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [31:0] io_enq_bits,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output        io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [31:0] io_deq_bits	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  reg  [31:0] ram;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  reg         full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire        io_enq_ready_0 = io_deq_ready | ~full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :286:{16,19}, :306:{24,39}
  wire        do_enq = io_enq_ready_0 & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :286:16, :306:{24,39}
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (do_enq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      ram <= io_enq_bits;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (reset)	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    else if (~(do_enq == (io_deq_ready & full)))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
      full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        end	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        ram = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][0]};	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
        full = _RANDOM[1'h0][0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = io_enq_ready_0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :286:16, :306:{24,39}
  assign io_deq_valid = full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
  assign io_deq_bits = ram;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
endmodule

// VCS coverage exclude_file
module ram_6x32(	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  input  [2:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [2:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:5];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  always @(posedge W0_clk) begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (W0_en & 1'h1)	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      Memory[W0_addr] <= W0_data;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    reg [31:0] _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        for (logic [2:0] i = 3'h0; i < 3'h6; i += 3'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
          Memory[i] = _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        end	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
endmodule

module Queue6_UInt32(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input         clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
                reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output        io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [31:0] io_enq_bits,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output        io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [31:0] io_deq_bits	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  reg  [2:0] enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [2:0] deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg        maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire       ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:260:33
  wire       empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :261:{25,28}
  wire       full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :262:24
  wire       do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :262:24, :286:19
  wire       do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :261:25, :285:19
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (reset) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      enq_ptr_value <= 3'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 3'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      if (do_enq) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        if (enq_ptr_value == 3'h5)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          enq_ptr_value <= 3'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          enq_ptr_value <= enq_ptr_value + 3'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (do_deq) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        if (deq_ptr_value == 3'h5)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          deq_ptr_value <= 3'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          deq_ptr_value <= deq_ptr_value + 3'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][2:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][5:3];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][6];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_6x32 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    .R0_addr (deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :262:24, :286:19
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :261:25, :285:19
endmodule

// VCS coverage exclude_file
module ram_11x8(	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  input  [3:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [7:0] R0_data,
  input  [3:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data
);

  reg [7:0] Memory[0:10];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  always @(posedge W0_clk) begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (W0_en & 1'h1)	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      Memory[W0_addr] <= W0_data;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    reg [31:0] _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        for (logic [3:0] i = 4'h0; i < 4'hB; i += 4'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
          Memory[i] = _RANDOM_MEM[7:0];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        end	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
endmodule

module Queue11_UInt8(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input        clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
               reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output       io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input        io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [7:0] io_enq_bits,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input        io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output       io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [7:0] io_deq_bits	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  reg  [3:0] enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [3:0] deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg        maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire       ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:260:33
  wire       empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :261:{25,28}
  wire       full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :262:24
  wire       do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :262:24, :286:19
  wire       do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :261:25, :285:19
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (reset) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      enq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      if (do_enq) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        if (enq_ptr_value == 4'hA)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          enq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          enq_ptr_value <= enq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (do_deq) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        if (deq_ptr_value == 4'hA)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          deq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          deq_ptr_value <= deq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][7:4];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][8];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_11x8 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    .R0_addr (deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :262:24, :286:19
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :261:25, :285:19
endmodule

// VCS coverage exclude_file
module ram_14x9(	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  input  [3:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [8:0] R0_data,
  input  [3:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [8:0] W0_data
);

  reg [8:0] Memory[0:13];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  always @(posedge W0_clk) begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (W0_en & 1'h1)	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      Memory[W0_addr] <= W0_data;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    reg [31:0] _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        for (logic [3:0] i = 4'h0; i < 4'hE; i += 4'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
          Memory[i] = _RANDOM_MEM[8:0];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        end	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 9'bx;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
endmodule

module Queue14_UInt9(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input        clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
               reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output       io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input        io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [8:0] io_enq_bits,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input        io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output       io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [8:0] io_deq_bits	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  reg  [3:0] enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [3:0] deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg        maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire       ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:260:33
  wire       empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :261:{25,28}
  wire       full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :262:24
  wire       do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :262:24, :286:19
  wire       do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :261:25, :285:19
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (reset) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      enq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      if (do_enq) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        if (enq_ptr_value == 4'hD)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          enq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          enq_ptr_value <= enq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (do_deq) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        if (deq_ptr_value == 4'hD)	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
          deq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          deq_ptr_value <= deq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][7:4];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][8];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_14x9 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    .R0_addr (deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :262:24, :286:19
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :261:25, :285:19
endmodule

module EXPFP32(	// src/main/scala/EXPFP32.scala:307:7
  input         clock,	// src/main/scala/EXPFP32.scala:307:7
                reset,	// src/main/scala/EXPFP32.scala:307:7
  output        io_in_ready,	// src/main/scala/EXPFP32.scala:308:14
  input         io_in_valid,	// src/main/scala/EXPFP32.scala:308:14
  input  [31:0] io_in_bits_in,	// src/main/scala/EXPFP32.scala:308:14
  input         io_out_ready,	// src/main/scala/EXPFP32.scala:308:14
  output        io_out_valid,	// src/main/scala/EXPFP32.scala:308:14
  output [31:0] io_out_bits_out	// src/main/scala/EXPFP32.scala:308:14
);

  wire        _qYi_io_enq_ready;	// src/main/scala/EXPFP32.scala:340:20
  wire        _qYi_io_deq_valid;	// src/main/scala/EXPFP32.scala:340:20
  wire [8:0]  _qYi_io_deq_bits;	// src/main/scala/EXPFP32.scala:340:20
  wire        _qYfi_io_enq_ready;	// src/main/scala/EXPFP32.scala:339:20
  wire        _qYfi_io_deq_valid;	// src/main/scala/EXPFP32.scala:339:20
  wire [7:0]  _qYfi_io_deq_bits;	// src/main/scala/EXPFP32.scala:339:20
  wire        _qYfj_io_enq_ready;	// src/main/scala/EXPFP32.scala:338:20
  wire        _qYfj_io_deq_valid;	// src/main/scala/EXPFP32.scala:338:20
  wire [31:0] _qYfj_io_deq_bits;	// src/main/scala/EXPFP32.scala:338:20
  wire        _s0Q_io_enq_ready;	// src/main/scala/EXPFP32.scala:328:19
  wire        _s0Q_io_deq_valid;	// src/main/scala/EXPFP32.scala:328:19
  wire [31:0] _s0Q_io_deq_bits;	// src/main/scala/EXPFP32.scala:328:19
  wire [31:0] _lut_io_out_value;	// src/main/scala/EXPFP32.scala:320:22
  wire        _mulC_io_in_ready;	// src/main/scala/EXPFP32.scala:319:22
  wire        _mulC_io_out_valid;	// src/main/scala/EXPFP32.scala:319:22
  wire [31:0] _mulC_io_out_bits_out;	// src/main/scala/EXPFP32.scala:319:22
  wire        _addB1_io_in_ready;	// src/main/scala/EXPFP32.scala:318:22
  wire        _addB1_io_out_valid;	// src/main/scala/EXPFP32.scala:318:22
  wire [31:0] _addB1_io_out_bits_out;	// src/main/scala/EXPFP32.scala:318:22
  wire        _mulB1_io_in_ready;	// src/main/scala/EXPFP32.scala:317:22
  wire        _mulB1_io_out_valid;	// src/main/scala/EXPFP32.scala:317:22
  wire [31:0] _mulB1_io_out_bits_out;	// src/main/scala/EXPFP32.scala:317:22
  wire        _addB0_io_in_ready;	// src/main/scala/EXPFP32.scala:316:22
  wire        _addB0_io_out_valid;	// src/main/scala/EXPFP32.scala:316:22
  wire [31:0] _addB0_io_out_bits_out;	// src/main/scala/EXPFP32.scala:316:22
  wire        _mulB0_io_in_ready;	// src/main/scala/EXPFP32.scala:315:22
  wire        _mulB0_io_out_valid;	// src/main/scala/EXPFP32.scala:315:22
  wire [31:0] _mulB0_io_out_bits_out;	// src/main/scala/EXPFP32.scala:315:22
  wire [8:0]  _decomp_io_out_yi;	// src/main/scala/EXPFP32.scala:314:22
  wire [7:0]  _decomp_io_out_yfi;	// src/main/scala/EXPFP32.scala:314:22
  wire [31:0] _decomp_io_out_yfj;	// src/main/scala/EXPFP32.scala:314:22
  wire        _mulA_io_out_valid;	// src/main/scala/EXPFP32.scala:313:22
  wire [31:0] _mulA_io_out_bits_out;	// src/main/scala/EXPFP32.scala:313:22
  wire        s1_fire =
    _s0Q_io_deq_valid & _mulB0_io_in_ready & _qYfj_io_enq_ready & _qYfi_io_enq_ready
    & _qYi_io_enq_ready;	// src/main/scala/EXPFP32.scala:315:22, :328:19, :338:20, :339:20, :340:20, :342:97
  wire        s4_in_valid = _addB0_io_out_valid & _qYfj_io_deq_valid;	// src/main/scala/EXPFP32.scala:316:22, :338:20, :362:40
  wire        s6_in_valid = _addB1_io_out_valid & _qYfi_io_deq_valid;	// src/main/scala/EXPFP32.scala:318:22, :339:20, :375:40
  wire [8:0]  _GEN = {1'h0, _qYi_io_deq_bits[7:0]};	// src/main/scala/EXPFP32.scala:340:20, :392:18, :394:{53,57}
  wire [8:0]  _eAdjS_T_8 =
    {1'h0, _mulC_io_out_bits_out[30:23]} + (_qYi_io_deq_bits[8] ? 9'h0 - _GEN : _GEN);	// src/main/scala/EXPFP32.scala:319:22, :340:20, :389:20, :391:18, :394:{33,38,53,57}, :395:18
  MULFP32 mulA (	// src/main/scala/EXPFP32.scala:313:22
    .clock           (clock),
    .reset           (reset),
    .io_in_ready     (io_in_ready),
    .io_in_valid     (io_in_valid),
    .io_in_bits_in1  (io_in_bits_in),
    .io_in_bits_in2  (32'h3FB8AA3B),	// src/main/scala/EXPFP32.scala:326:23
    .io_out_ready    (_s0Q_io_enq_ready),	// src/main/scala/EXPFP32.scala:328:19
    .io_out_valid    (_mulA_io_out_valid),
    .io_out_bits_out (_mulA_io_out_bits_out)
  );
  DecomposeFP32 decomp (	// src/main/scala/EXPFP32.scala:314:22
    .io_in_y    (_s0Q_io_deq_bits),	// src/main/scala/EXPFP32.scala:328:19
    .io_out_yi  (_decomp_io_out_yi),
    .io_out_yfi (_decomp_io_out_yfi),
    .io_out_yfj (_decomp_io_out_yfj)
  );
  MULFP32 mulB0 (	// src/main/scala/EXPFP32.scala:315:22
    .clock           (clock),
    .reset           (reset),
    .io_in_ready     (_mulB0_io_in_ready),
    .io_in_valid     (s1_fire),	// src/main/scala/EXPFP32.scala:342:97
    .io_in_bits_in1  (_decomp_io_out_yfj),	// src/main/scala/EXPFP32.scala:314:22
    .io_in_bits_in2  (32'h3E75FDF0),	// src/main/scala/EXPFP32.scala:348:24
    .io_out_ready    (_addB0_io_in_ready),	// src/main/scala/EXPFP32.scala:316:22
    .io_out_valid    (_mulB0_io_out_valid),
    .io_out_bits_out (_mulB0_io_out_bits_out)
  );
  ADDFP32 addB0 (	// src/main/scala/EXPFP32.scala:316:22
    .clock           (clock),
    .reset           (reset),
    .io_in_ready     (_addB0_io_in_ready),
    .io_in_valid     (_mulB0_io_out_valid),	// src/main/scala/EXPFP32.scala:315:22
    .io_in_bits_in1  (_mulB0_io_out_bits_out),	// src/main/scala/EXPFP32.scala:315:22
    .io_in_bits_in2  (32'h3F317218),	// src/main/scala/EXPFP32.scala:359:24
    .io_out_ready    (_mulB1_io_in_ready & _qYfj_io_deq_valid),	// src/main/scala/EXPFP32.scala:317:22, :338:20, :367:45
    .io_out_valid    (_addB0_io_out_valid),
    .io_out_bits_out (_addB0_io_out_bits_out)
  );
  MULFP32 mulB1 (	// src/main/scala/EXPFP32.scala:317:22
    .clock           (clock),
    .reset           (reset),
    .io_in_ready     (_mulB1_io_in_ready),
    .io_in_valid     (s4_in_valid),	// src/main/scala/EXPFP32.scala:362:40
    .io_in_bits_in1  (_addB0_io_out_bits_out),	// src/main/scala/EXPFP32.scala:316:22
    .io_in_bits_in2  (_qYfj_io_deq_bits),	// src/main/scala/EXPFP32.scala:338:20
    .io_out_ready    (_addB1_io_in_ready),	// src/main/scala/EXPFP32.scala:318:22
    .io_out_valid    (_mulB1_io_out_valid),
    .io_out_bits_out (_mulB1_io_out_bits_out)
  );
  ADDFP32 addB1 (	// src/main/scala/EXPFP32.scala:318:22
    .clock           (clock),
    .reset           (reset),
    .io_in_ready     (_addB1_io_in_ready),
    .io_in_valid     (_mulB1_io_out_valid),	// src/main/scala/EXPFP32.scala:317:22
    .io_in_bits_in1  (_mulB1_io_out_bits_out),	// src/main/scala/EXPFP32.scala:317:22
    .io_in_bits_in2  (32'h3F800000),	// src/main/scala/EXPFP32.scala:372:24
    .io_out_ready    (_mulC_io_in_ready & _qYfi_io_deq_valid),	// src/main/scala/EXPFP32.scala:319:22, :339:20, :381:44
    .io_out_valid    (_addB1_io_out_valid),
    .io_out_bits_out (_addB1_io_out_bits_out)
  );
  MULFP32 mulC (	// src/main/scala/EXPFP32.scala:319:22
    .clock           (clock),
    .reset           (reset),
    .io_in_ready     (_mulC_io_in_ready),
    .io_in_valid     (s6_in_valid),	// src/main/scala/EXPFP32.scala:375:40
    .io_in_bits_in1  (_lut_io_out_value),	// src/main/scala/EXPFP32.scala:320:22
    .io_in_bits_in2  (_addB1_io_out_bits_out),	// src/main/scala/EXPFP32.scala:318:22
    .io_out_ready    (io_out_ready & _qYi_io_deq_valid),	// src/main/scala/EXPFP32.scala:340:20, :400:38
    .io_out_valid    (_mulC_io_out_valid),
    .io_out_bits_out (_mulC_io_out_bits_out)
  );
  EXPFP32LUT lut (	// src/main/scala/EXPFP32.scala:320:22
    .io_in_idx    (_qYfi_io_deq_bits),	// src/main/scala/EXPFP32.scala:339:20
    .io_out_value (_lut_io_out_value)
  );
  Queue1_UInt32 s0Q (	// src/main/scala/EXPFP32.scala:328:19
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_s0Q_io_enq_ready),
    .io_enq_valid (_mulA_io_out_valid),	// src/main/scala/EXPFP32.scala:313:22
    .io_enq_bits  (_mulA_io_out_bits_out),	// src/main/scala/EXPFP32.scala:313:22
    .io_deq_ready (s1_fire),	// src/main/scala/EXPFP32.scala:342:97
    .io_deq_valid (_s0Q_io_deq_valid),
    .io_deq_bits  (_s0Q_io_deq_bits)
  );
  Queue6_UInt32 qYfj (	// src/main/scala/EXPFP32.scala:338:20
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_qYfj_io_enq_ready),
    .io_enq_valid (s1_fire),	// src/main/scala/EXPFP32.scala:342:97
    .io_enq_bits  (_decomp_io_out_yfj),	// src/main/scala/EXPFP32.scala:314:22
    .io_deq_ready (_mulB1_io_in_ready & s4_in_valid),	// src/main/scala/EXPFP32.scala:317:22, :362:40, src/main/scala/chisel3/util/Decoupled.scala:51:35
    .io_deq_valid (_qYfj_io_deq_valid),
    .io_deq_bits  (_qYfj_io_deq_bits)
  );
  Queue11_UInt8 qYfi (	// src/main/scala/EXPFP32.scala:339:20
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_qYfi_io_enq_ready),
    .io_enq_valid (s1_fire),	// src/main/scala/EXPFP32.scala:342:97
    .io_enq_bits  (_decomp_io_out_yfi),	// src/main/scala/EXPFP32.scala:314:22
    .io_deq_ready (_mulC_io_in_ready & s6_in_valid),	// src/main/scala/EXPFP32.scala:319:22, :375:40, src/main/scala/chisel3/util/Decoupled.scala:51:35
    .io_deq_valid (_qYfi_io_deq_valid),
    .io_deq_bits  (_qYfi_io_deq_bits)
  );
  Queue14_UInt9 qYi (	// src/main/scala/EXPFP32.scala:340:20
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_qYi_io_enq_ready),
    .io_enq_valid (s1_fire),	// src/main/scala/EXPFP32.scala:342:97
    .io_enq_bits  (_decomp_io_out_yi),	// src/main/scala/EXPFP32.scala:314:22
    .io_deq_ready (io_out_ready & _mulC_io_out_valid),	// src/main/scala/EXPFP32.scala:319:22, :401:38
    .io_deq_valid (_qYi_io_deq_valid),
    .io_deq_bits  (_qYi_io_deq_bits)
  );
  assign io_out_valid = _mulC_io_out_valid & _qYi_io_deq_valid;	// src/main/scala/EXPFP32.scala:307:7, :319:22, :340:20, :386:25
  assign io_out_bits_out =
    {1'h0,
     $signed(_eAdjS_T_8) < 9'sh0 ? 8'h0 : _eAdjS_T_8[7:0],
     _mulC_io_out_bits_out[22:0]};	// src/main/scala/EXPFP32.scala:307:7, :319:22, :394:{33,53}, :395:{18,25}, :396:{18,38}
endmodule

