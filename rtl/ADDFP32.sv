// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ADDFP32(	// src/main/scala/EXPFP32.scala:42:7
  input         clock,	// src/main/scala/EXPFP32.scala:42:7
                reset,	// src/main/scala/EXPFP32.scala:42:7
  output        io_in_ready,	// src/main/scala/EXPFP32.scala:43:14
  input         io_in_valid,	// src/main/scala/EXPFP32.scala:43:14
  input  [31:0] io_in_bits_in1,	// src/main/scala/EXPFP32.scala:43:14
                io_in_bits_in2,	// src/main/scala/EXPFP32.scala:43:14
  input         io_out_ready,	// src/main/scala/EXPFP32.scala:43:14
  output        io_out_valid,	// src/main/scala/EXPFP32.scala:43:14
  output [31:0] io_out_bits_out	// src/main/scala/EXPFP32.scala:43:14
);

  reg          s1_valid;	// src/main/scala/EXPFP32.scala:48:25
  reg          s2_valid;	// src/main/scala/EXPFP32.scala:49:25
  wire         s1_ready = ~s1_valid | io_out_ready;	// src/main/scala/EXPFP32.scala:48:25, :51:{18,28}
  reg          s2_sx;	// src/main/scala/EXPFP32.scala:59:24
  reg          s2_sy;	// src/main/scala/EXPFP32.scala:60:24
  reg  [7:0]   s2_ex;	// src/main/scala/EXPFP32.scala:61:24
  reg  [24:0]  s2_fx;	// src/main/scala/EXPFP32.scala:62:24
  reg  [24:0]  s2_aligned;	// src/main/scala/EXPFP32.scala:63:24
  reg          s2_guard;	// src/main/scala/EXPFP32.scala:64:24
  reg          s2_round;	// src/main/scala/EXPFP32.scala:65:24
  reg          s2_sticky;	// src/main/scala/EXPFP32.scala:66:24
  reg          s2_isSub;	// src/main/scala/EXPFP32.scala:67:24
  reg  [31:0]  outReg;	// src/main/scala/EXPFP32.scala:105:19
  wire         swap =
    io_in_bits_in1[30:23] < io_in_bits_in2[30:23]
    | io_in_bits_in1[30:23] == io_in_bits_in2[30:23]
    & io_in_bits_in1[22:0] < io_in_bits_in2[22:0];	// src/main/scala/EXPFP32.scala:72:18, :73:18, :74:36, :75:36, :76:27, :77:{15,22,29,56,65,72,81}
  wire [31:0]  x = swap ? io_in_bits_in2 : io_in_bits_in1;	// src/main/scala/EXPFP32.scala:77:{22,29,65}, :78:16
  wire [31:0]  y = swap ? io_in_bits_in1 : io_in_bits_in2;	// src/main/scala/EXPFP32.scala:77:{22,29,65}, :79:16
  wire [24:0]  fy = {2'h1, y[22:0]};	// src/main/scala/EXPFP32.scala:42:7, :79:16, :85:{17,33}
  wire [8:0]   _diff_T_2 = {1'h0, x[30:23]} - {1'h0, y[30:23]};	// src/main/scala/EXPFP32.scala:48:25, :78:16, :79:16, :82:15, :83:15, :86:25
  wire [8:0]   _stickyCount_T_4 = _diff_T_2 - 9'h2;	// src/main/scala/EXPFP32.scala:86:25, :90:72
  wire         _sticky_T = _diff_T_2 < 9'h3;	// src/main/scala/EXPFP32.scala:86:25, :91:31
  wire [24:0]  _guard_T_4 = fy >> _diff_T_2 - 9'h1;	// src/main/scala/EXPFP32.scala:85:17, :86:25, :89:{66,73}
  wire [24:0]  _round_T_4 = fy >> _stickyCount_T_4;	// src/main/scala/EXPFP32.scala:85:17, :90:{65,72}
  wire [536:0] _stickyfask_T =
    537'h1 << (_sticky_T ? 9'h0 : _stickyCount_T_4 > 9'h19 ? 9'h19 : _stickyCount_T_4);	// src/main/scala/EXPFP32.scala:90:72, :91:{26,31,44,53}, :92:32
  wire [25:0]  _sumAdd_T_2 = {1'h0, s2_fx} + {1'h0, s2_aligned};	// src/main/scala/EXPFP32.scala:48:25, :62:24, :63:24, :109:37
  wire [24:0]  _sumSub_T_5 = s2_fx + ~s2_aligned + 25'h1;	// src/main/scala/EXPFP32.scala:62:24, :63:24, :111:{52,65}
  wire [7:0]   expAdd = _sumAdd_T_2[25] ? s2_ex + 8'h1 : s2_ex;	// src/main/scala/EXPFP32.scala:61:24, :90:25, :109:37, :110:26, :119:19, :120:{14,23}, :126:14
  wire [24:0]  mantAdd = _sumAdd_T_2[25] ? _sumAdd_T_2[25:1] : _sumAdd_T_2[24:0];	// src/main/scala/EXPFP32.scala:109:37, :110:26, :119:19, :121:{15,24}, :127:{15,24}
  wire [24:0]  _mantAddR_T =
    mantAdd
    + {24'h0,
       (_sumAdd_T_2[25] ? _sumAdd_T_2[0] : s2_guard)
         & ((_sumAdd_T_2[25] ? s2_guard : s2_round) | _sumAdd_T_2[25] & s2_round
            | s2_sticky | mantAdd[0])};	// src/main/scala/EXPFP32.scala:64:24, :65:24, :66:24, :109:37, :110:26, :119:19, :121:15, :122:{10,19}, :123:10, :124:10, :127:15, :128:10, :129:10, :130:10, :133:{21,30,39}, :134:27, :140:24
  wire         zeroSub = _sumSub_T_5[23:0] == 24'h0;	// src/main/scala/EXPFP32.scala:111:65, :112:24, :139:23, :140:24
  wire [3:0]   _GEN =
    {{_sumSub_T_5[5:4], _sumSub_T_5[7]} & 3'h5, 1'h0}
    | {_sumSub_T_5[7:6], _sumSub_T_5[9:8]} & 4'h5;	// src/main/scala/EXPFP32.scala:48:25, :111:65, :112:24, :139:23, :141:37, src/main/scala/chisel3/util/Mux.scala:50:70
  wire [4:0]   sh =
    zeroSub
      ? 5'h18
      : _sumSub_T_5[23]
          ? 5'h0
          : _sumSub_T_5[22]
              ? 5'h1
              : _sumSub_T_5[21]
                  ? 5'h2
                  : _sumSub_T_5[20]
                      ? 5'h3
                      : _sumSub_T_5[19]
                          ? 5'h4
                          : _sumSub_T_5[18]
                              ? 5'h5
                              : _sumSub_T_5[17]
                                  ? 5'h6
                                  : _sumSub_T_5[16]
                                      ? 5'h7
                                      : _sumSub_T_5[15]
                                          ? 5'h8
                                          : _sumSub_T_5[14]
                                              ? 5'h9
                                              : _sumSub_T_5[13]
                                                  ? 5'hA
                                                  : _sumSub_T_5[12]
                                                      ? 5'hB
                                                      : _sumSub_T_5[11]
                                                          ? 5'hC
                                                          : _sumSub_T_5[10]
                                                              ? 5'hD
                                                              : _sumSub_T_5[9]
                                                                  ? 5'hE
                                                                  : _GEN[0]
                                                                      ? 5'hF
                                                                      : _GEN[1]
                                                                          ? 5'h10
                                                                          : _GEN[2]
                                                                              ? 5'h11
                                                                              : _GEN[3]
                                                                                  ? 5'h12
                                                                                  : _sumSub_T_5[4]
                                                                                      ? 5'h13
                                                                                      : _sumSub_T_5[3]
                                                                                          ? 5'h14
                                                                                          : _sumSub_T_5[2]
                                                                                              ? 5'h15
                                                                                              : {4'hB,
                                                                                                 ~(_sumSub_T_5[1])};	// src/main/scala/EXPFP32.scala:87:25, :111:65, :112:24, :139:23, :140:24, :141:37, :142:17, src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/chisel3/util/OneHot.scala:48:45
  wire [7:0]   _GEN_0 = {3'h0, sh};	// src/main/scala/EXPFP32.scala:42:7, :142:17, :143:20
  wire         _GEN_1 = zeroSub | _GEN_0 >= s2_ex;	// src/main/scala/EXPFP32.scala:61:24, :140:24, :143:20, :144:21
  wire [55:0]  _mantSub_T = {31'h0, _sumSub_T_5} << sh;	// src/main/scala/EXPFP32.scala:111:65, :142:17, :145:58
  wire [24:0]  mantSub = _GEN_1 ? 25'h0 : _mantSub_T[24:0];	// src/main/scala/EXPFP32.scala:88:22, :144:21, :145:{22,58,63}
  always @(posedge clock) begin	// src/main/scala/EXPFP32.scala:42:7
    if (reset) begin	// src/main/scala/EXPFP32.scala:42:7
      s1_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:48:25
      s2_valid <= 1'h0;	// src/main/scala/EXPFP32.scala:48:25, :49:25
    end
    else begin	// src/main/scala/EXPFP32.scala:42:7
      if (s1_ready)	// src/main/scala/EXPFP32.scala:51:28
        s1_valid <= io_in_valid;	// src/main/scala/EXPFP32.scala:48:25
      if (io_out_ready)	// src/main/scala/EXPFP32.scala:43:14
        s2_valid <= s1_valid;	// src/main/scala/EXPFP32.scala:48:25, :49:25
    end
    if (s1_ready & io_in_valid) begin	// src/main/scala/EXPFP32.scala:51:28, :54:26
      s2_sx <= x[31];	// src/main/scala/EXPFP32.scala:59:24, :78:16, :80:15
      s2_sy <= y[31];	// src/main/scala/EXPFP32.scala:60:24, :79:16, :81:15
      s2_ex <= x[30:23];	// src/main/scala/EXPFP32.scala:61:24, :78:16, :82:15
      s2_fx <= {2'h1, x[22:0]};	// src/main/scala/EXPFP32.scala:42:7, :62:24, :78:16, :84:{17,33}
      s2_aligned <= _diff_T_2 > 9'h18 ? 25'h0 : fy >> _diff_T_2;	// src/main/scala/EXPFP32.scala:63:24, :85:17, :86:25, :87:25, :88:{22,45}
      s2_guard <= ~(_diff_T_2 == 9'h0 | _diff_T_2 > 9'h19) & _guard_T_4[0];	// src/main/scala/EXPFP32.scala:64:24, :86:25, :89:{20,25,43,48,66,79}, :91:{26,44}
      s2_round <= ~(_diff_T_2 < 9'h2 | _diff_T_2 > 9'h1A) & _round_T_4[0];	// src/main/scala/EXPFP32.scala:65:24, :86:25, :90:{20,25,42,47,65,78}, :91:31
      s2_sticky <= ~_sticky_T & (|({1'h1, y[22:0]} & _stickyfask_T[23:0] - 24'h1));	// src/main/scala/EXPFP32.scala:66:24, :77:29, :79:16, :85:{17,33}, :91:31, :92:{32,46}, :93:{21,43,62}
      s2_isSub <= x[31] ^ y[31];	// src/main/scala/EXPFP32.scala:67:24, :78:16, :79:16, :80:15, :81:15, :102:22
    end
    if (io_out_ready & s1_valid)	// src/main/scala/EXPFP32.scala:48:25, :55:26
      outReg <=
        {s2_isSub ? (|mantSub) & (s2_fx >= s2_aligned ? s2_sx : s2_sy) : s2_sx,
         s2_isSub
           ? (_GEN_1 ? 8'h0 : s2_ex - _GEN_0)
           : _mantAddR_T[24] ? expAdd + 8'h1 : expAdd,
         s2_isSub
           ? mantSub[22:0]
           : _mantAddR_T[24] ? _mantAddR_T[23:1] : _mantAddR_T[22:0]};	// src/main/scala/EXPFP32.scala:59:24, :60:24, :61:24, :62:24, :63:24, :67:24, :90:25, :105:19, :119:19, :120:14, :126:14, :134:27, :135:31, :136:{22,41}, :137:27, :143:20, :144:{21,37,49}, :145:22, :147:21, :148:21, :151:19, :152:{19,26,35,62,67,73}, :153:25, :154:18
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/EXPFP32.scala:42:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/EXPFP32.scala:42:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/EXPFP32.scala:42:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];	// src/main/scala/EXPFP32.scala:42:7
    initial begin	// src/main/scala/EXPFP32.scala:42:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/EXPFP32.scala:42:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/EXPFP32.scala:42:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/EXPFP32.scala:42:7
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// src/main/scala/EXPFP32.scala:42:7
        end	// src/main/scala/EXPFP32.scala:42:7
        s1_valid = _RANDOM[2'h0][0];	// src/main/scala/EXPFP32.scala:42:7, :48:25
        s2_valid = _RANDOM[2'h0][1];	// src/main/scala/EXPFP32.scala:42:7, :48:25, :49:25
        s2_sx = _RANDOM[2'h0][2];	// src/main/scala/EXPFP32.scala:42:7, :48:25, :59:24
        s2_sy = _RANDOM[2'h0][3];	// src/main/scala/EXPFP32.scala:42:7, :48:25, :60:24
        s2_ex = _RANDOM[2'h0][11:4];	// src/main/scala/EXPFP32.scala:42:7, :48:25, :61:24
        s2_fx = {_RANDOM[2'h0][31:12], _RANDOM[2'h1][4:0]};	// src/main/scala/EXPFP32.scala:42:7, :48:25, :62:24
        s2_aligned = _RANDOM[2'h1][29:5];	// src/main/scala/EXPFP32.scala:42:7, :62:24, :63:24
        s2_guard = _RANDOM[2'h1][30];	// src/main/scala/EXPFP32.scala:42:7, :62:24, :64:24
        s2_round = _RANDOM[2'h1][31];	// src/main/scala/EXPFP32.scala:42:7, :62:24, :65:24
        s2_sticky = _RANDOM[2'h2][0];	// src/main/scala/EXPFP32.scala:42:7, :66:24
        s2_isSub = _RANDOM[2'h2][1];	// src/main/scala/EXPFP32.scala:42:7, :66:24, :67:24
        outReg = {_RANDOM[2'h2][31:2], _RANDOM[2'h3][1:0]};	// src/main/scala/EXPFP32.scala:42:7, :66:24, :105:19
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/EXPFP32.scala:42:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/EXPFP32.scala:42:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = s1_ready;	// src/main/scala/EXPFP32.scala:42:7, :51:28
  assign io_out_valid = s2_valid;	// src/main/scala/EXPFP32.scala:42:7, :49:25
  assign io_out_bits_out = outReg;	// src/main/scala/EXPFP32.scala:42:7, :105:19
endmodule

